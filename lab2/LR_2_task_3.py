# -*- coding: utf-8 -*-
"""LR_2_task_3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1H4kPTpP5gjogtxFVaTKFQrfF363gfPr1
"""

# Крок 1: Ініціалізація
from sklearn.datasets import load_iris
import numpy as np
import pandas as pd

iris_dataset = load_iris()

# Перевірка ключів в об'єкті iris_dataset
print("Ключі iris_dataset: \n{}".format(iris_dataset.keys()))

# Ознайомлення з описом (виводимо перші 193 символи)
print("\nОпис набору даних (частина):")
print(iris_dataset['DESCR'][:193] + "\n...")

# Назви класів (міток)
print("\nНазви відповідей (класи):")
print(iris_dataset['target_names'])

# Назви ознак (features)
print("\nНазви ознак:")
print(iris_dataset['feature_names'])

# Інформація про масив із даними
print("\nТип масиву data:", type(iris_dataset['data']))
print("Форма масиву data:", iris_dataset['data'].shape)

# Виведення перших 5 прикладів
print("\nПерші 5 прикладів з даними:")
print(iris_dataset['data'][:5])

# Інформація про цільові значення
print("\nТип масиву target:", type(iris_dataset['target']))
print("Цільові значення (мітки):")
print(iris_dataset['target'])

# Крок 2: Візуалізація даних
import matplotlib.pyplot as plt
from pandas.plotting import scatter_matrix

# Перетворення масиву даних у DataFrame для зручної візуалізації
# Додаємо також колонку 'class', де мітки (0, 1, 2) замінюємо на назви класів
df = pd.DataFrame(data=iris_dataset['data'], columns=iris_dataset['feature_names'])
df['class'] = pd.Categorical.from_codes(iris_dataset['target'], iris_dataset['target_names'])

# Одновимірна візуалізація

# Діаграми розмаху (boxplot) для кожної ознаки
df.plot(kind='box', subplots=True, layout=(2,2), sharex=False, sharey=False, figsize=(10, 6))
plt.suptitle("Діаграми розмаху для кожної ознаки")
plt.tight_layout()
plt.show()

# Гістограми розподілу для кожної ознаки
df.hist(column=iris_dataset['feature_names'], figsize=(10, 6), layout=(2, 2))
plt.suptitle("Гістограми розподілу ознак")
plt.tight_layout()
plt.show()

# Багатовимірна візуалізація

# Матриця діаграм розсіювання (scatter matrix)
scatter_matrix(df[iris_dataset['feature_names']], figsize=(10, 10), diagonal='hist', alpha=0.8)
plt.suptitle("Матриця діаграм розсіювання для всіх ознак")
plt.show()

# КРОК 3: СТВОРЕННЯ НАВЧАЛЬНОГО ТА ТЕСТОВОГО НАБОРІВ
from sklearn.model_selection import train_test_split
from sklearn.model_selection import StratifiedKFold
from sklearn.metrics import accuracy_score
import numpy as np

# Виділення ознак (X) та міток (y)
X = df.iloc[:, :-1].values  # Усі стовпці, крім останнього (ознаки)
y = df['class'].values      # Мітки класів

# Розбиття на навчальну та тестову вибірки (80/20), з фіксованим seed для відтворюваності
X_train, X_validation, y_train, y_validation = train_test_split(
    X, y, test_size=0.2, random_state=1, stratify=y
)

# Виведення розмірів для звіту
print("Розмір навчального набору:", X_train.shape)
print("Розмір тестового набору:", X_validation.shape)

# Створення стратифікованої 10-кратної крос-валідації
kfold = StratifiedKFold(n_splits=10, shuffle=True, random_state=1)

# КРОК 4. КЛАСИФІКАЦІЯ (ПОБУДОВА МОДЕЛІ)
from sklearn.linear_model import LogisticRegression
from sklearn.discriminant_analysis import LinearDiscriminantAnalysis
from sklearn.neighbors import KNeighborsClassifier
from sklearn.tree import DecisionTreeClassifier
from sklearn.naive_bayes import GaussianNB
from sklearn.svm import SVC
from sklearn.model_selection import cross_val_score
from matplotlib import pyplot as plt

# Побудова списку моделей для оцінки
models = []
models.append(('LR', LogisticRegression(solver='liblinear', multi_class='ovr')))
models.append(('LDA', LinearDiscriminantAnalysis()))
models.append(('KNN', KNeighborsClassifier()))
models.append(('CART', DecisionTreeClassifier()))
models.append(('NB', GaussianNB()))
models.append(('SVM', SVC(gamma='auto')))

# Оцінка моделей з використанням стратифікованої крос-валідації
results = []
names = []

print("Оцінка моделей (точність):")
for name, model in models:
    kfold = StratifiedKFold(n_splits=10, random_state=1, shuffle=True)
    cv_results = cross_val_score(model, X_train, y_train, cv=kfold, scoring='accuracy')
    results.append(cv_results)
    names.append(name)
    print(f"{name}: {cv_results.mean():.4f} (+/- {cv_results.std():.4f})")

# Візуалізація порівняння точності моделей
plt.boxplot(results, labels=names)
plt.title('Порівняння алгоритмів')
plt.ylabel('Точність')
plt.grid(True)
plt.show()

# Крок 6: Отримання прогнозу на контрольній вибірці
# КРОК 7. ОЦІНКА ЯКОСТІ МОДЕЛІ
from sklearn.svm import SVC
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report
from sklearn.model_selection import train_test_split

# Розділення даних на X (ознаки) та Y (цільові значення)
X = iris_dataset['data']
Y = iris_dataset['target']

# Розбиття даних на тренувальну та тестову вибірки
X_train, X_validation, Y_train, Y_validation = train_test_split(X, Y, test_size=0.20, random_state=1)

# Перевірка, чи правильно розділені дані
print("Розміри тренувальних даних X:", X_train.shape)
print("Розміри тренувальних міток Y:", Y_train.shape)
print("Розміри тестових даних X:", X_validation.shape)
print("Розміри тестових міток Y:", Y_validation.shape)

# Створення моделі SVM
model_svm = SVC(gamma='auto')

# Навчання моделі на навчальних даних
model_svm.fit(X_train, Y_train)

# Прогнозування класів на тестових даних
predictions = model_svm.predict(X_validation)

# Оцінка точності моделі
accuracy_svm = accuracy_score(Y_validation, predictions)
print(f"Точність моделі SVM на тестових даних: {accuracy_svm:.4f}")

# Виведення матриці плутанини для моделі SVM
print("\nМатриця плутанини:")
print(confusion_matrix(Y_validation, predictions))

# Звіт класифікації для моделі SVM
print("\nЗвіт класифікації:")
print(classification_report(Y_validation, predictions))

# Візуалізація матриці плутанини для SVM
import seaborn as sns
import matplotlib.pyplot as plt

conf_matrix_svm = confusion_matrix(Y_validation, predictions)
sns.heatmap(conf_matrix_svm, annot=True, fmt="d", cmap="Blues", xticklabels=iris_dataset['target_names'], yticklabels=iris_dataset['target_names'])
plt.title('Матриця плутанини для моделі SVM')
plt.xlabel('Прогнозовані класи')
plt.ylabel('Справжні класи')
plt.show()

# КРОК 8. ОТРИМАННЯ ПРОГНОЗУ ДЛЯ НОВИХ ДАНИХ

# Нове спостереження (дані невідомої квітки ірису)
X_new = np.array([[5, 2.9, 1, 0.2]])

# Перевіряємо форму масиву, як очікується - (1, 4)
print("Форма масиву X_new: {}".format(X_new.shape))

# Створюємо новий екземпляр моделі (SVM, обраної раніше)
model_svm = SVC(gamma='auto')
model_svm.fit(X_train, Y_train)

# Використовуємо модель для передбачення класу нової квітки
prediction = model_svm.predict(X_new)

# Виводимо числове передбачення та відповідну назву класу
print("Спрогнозований клас (числовий):", prediction[0])
print("Спрогнозована мітка:", iris_dataset['target_names'][prediction[0]])